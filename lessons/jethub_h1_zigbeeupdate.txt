Репозиторий zigpy-znp - https://github.com/zigpy/zigpy-znp/

NVRAM
pip3 install git+https://github.com/zigpy/zigpy-znp/

Чтение NVRAM
python3 -m zigpy_znp.tools.nvram_read /dev/ttyAML2 -o backup.json

Прошивка

Репозиторий cc2538-bsl - https://github.com/JelmerT/cc2538-bsl

Качаем утилиту для прошивки
git clone https://github.com/JelmerT/cc2538-bsl.git

Устанавливаем дополнительные пакеты
pip3 install pyserial intelhex python-magic

Установка unzip
sudo apt-get install -y unzip

Репозитории с прошивками - основная ветка
Прошивка из урока для CC2652P (launchpad)- https://github.com/Koenkk/Z-Stack-firmware/tree/Z-Stack_Home_3.x.0_20211217/coordinator/Z-Stack_3.x.0/bin
Прошивка для CC2538 (UART) - https://github.com/jethome-ru/zigbee-firmware/tree/master/ti/coordinator/cc2538_cc2592

Ветка для разработчиков
https://github.com/Koenkk/Z-Stack-firmware/tree/develop/coordinator/Z-Stack_3.x.0/bin


Качаем и распаковываем прошивку - 
wget https://github.com/Koenkk/Z-Stack-firmware/raw/develop/coordinator/Z-Stack_3.x.0/bin/CC1352P2_CC2652P_launchpad_coordinator_20220103.zip && unzip CC1352P2_CC2652P_launchpad_coordinator_20220103.zip

Список файлов 
ls

Переходим в режим root
sudo bash

Переводим модуль в режим SBL (serial bootloader):
echo 0 > /sys/class/gpio/gpio510/value
echo 1 > /sys/class/gpio/gpio507/value
echo 0 > /sys/class/gpio/gpio507/value

Прошиваем
python3 cc2538-bsl/cc2538-bsl.py -p /dev/ttyAML2 -e -w CC1352P2_CC2652P_launchpad_coordinator_20220103.hex

Возвращаем в рабочий режим
echo 1 > /sys/class/gpio/gpio510/value
echo 1 > /sys/class/gpio/gpio507/value
echo 0 > /sys/class/gpio/gpio507/value

Выходим из режима root
exit 

Записываем NVRAM
python3 -m zigpy_znp.tools.nvram_write /dev/ttyAML2 -i backup.json

Дополнительно (в уроке этого нет)
Очистка NVRAM
python3 -m zigpy_znp.tools.nvram_reset /dev/ttyAML2
